/**
 * Content Scraper Chrome Extension
 * 
 * This extension allows you to scrape the content area of any web page with a single click.
 * It's specifically designed to work well with documentation sites like Google GenAI docs.
 */

// Extension structure:
//
// manifest.json - Extension configuration
// popup.html - Extension popup UI
// popup.js - Popup interaction logic
// content.js - Content script that runs on web pages
// background.js - Background script for extension

// 1. First, let's create the manifest.json file:

/**
 * manifest.json - Extension configuration
 */
{
  "manifest_version": 3,
  "name": "Content Scraper",
  "version": "1.0",
  "description": "Scrape content areas from web pages with one click",
  "permissions": ["activeTab", "scripting", "downloads"],
  "action": {
    "default_popup": "popup.html",
    "default_icon": {
      "16": "icons/icon16.png",
      "48": "icons/icon48.png",
      "128": "icons/icon128.png"
    }
  },
  "icons": {
    "16": "icons/icon16.png",
    "48": "icons/icon48.png",
    "128": "icons/icon128.png"
  },
  "content_scripts": [
    {
      "matches": ["<all_urls>"],
      "js": ["content.js"]
    }
  ],
  "background": {
    "service_worker": "background.js"
  }
}

/**
 * popup.html - Extension popup UI
 */
<!DOCTYPE html>
<html>
<head>
  <title>Content Scraper</title>
  <style>
    body {
      width: 300px;
      padding: 15px;
      font-family: Arial, sans-serif;
    }
    h2 {
      margin-top: 0;
      color: #333;
    }
    button {
      background-color: #4285f4;
      color: white;
      border: none;
      padding: 8px 16px;
      border-radius: 4px;
      cursor: pointer;
      margin-bottom: 10px;
      width: 100%;
    }
    button:hover {
      background-color: #3367d6;
    }
    .selector-input {
      width: 100%;
      padding: 8px;
      margin-bottom: 10px;
      box-sizing: border-box;
    }
    .status {
      color: #666;
      margin-top: 10px;
      font-style: italic;
    }
    .preset-selectors {
      margin-top: 10px;
    }
    .preset-selectors button {
      background-color: #34a853;
      margin-bottom: 5px;
    }
  </style>
</head>
<body>
  <h2>Content Scraper</h2>
  <p>Scrape the content area from the current page</p>
  
  <input type="text" id="selector" placeholder="CSS Selector (e.g., .col-content)" class="selector-input">
  
  <button id="scrapeButton">Scrape Content</button>
  <button id="copyButton">Copy to Clipboard</button>
  <button id="downloadButton">Download HTML</button>
  
  <div class="preset-selectors">
    <p><strong>Preset selectors:</strong></p>
    <button id="googleGenAiSelector">.col-content</button>
    <button id="mainContentSelector">main</button>
    <button id="articleSelector">article</button>
  </div>
  
  <div id="status" class="status"></div>
  
  <script src="popup.js"></script>
</body>
</html>

/**
 * popup.js - Popup interaction logic
 */
document.addEventListener('DOMContentLoaded', function() {
  // Get UI elements
  const selectorInput = document.getElementById('selector');
  const scrapeButton = document.getElementById('scrapeButton');
  const copyButton = document.getElementById('copyButton');
  const downloadButton = document.getElementById('downloadButton');
  const statusDiv = document.getElementById('status');
  
  // Preset selector buttons
  document.getElementById('googleGenAiSelector').addEventListener('click', () => {
    selectorInput.value = '.col-content';
  });
  
  document.getElementById('mainContentSelector').addEventListener('click', () => {
    selectorInput.value = 'main';
  });
  
  document.getElementById('articleSelector').addEventListener('click', () => {
    selectorInput.value = 'article';
  });
  
  // Store the scraped content
  let scrapedContent = '';
  
  // Scrape button click handler
  scrapeButton.addEventListener('click', async () => {
    const selector = selectorInput.value.trim();
    
    if (!selector) {
      statusDiv.textContent = 'Please enter a CSS selector';
      return;
    }
    
    try {
      statusDiv.textContent = 'Scraping content...';
      
      // Get the active tab
      const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
      
      // Execute content script to scrape the page
      const result = await chrome.tabs.sendMessage(tab.id, { 
        action: 'scrapeContent', 
        selector: selector 
      });
      
      if (result.success) {
        scrapedContent = result.content;
        statusDiv.textContent = 'Content scraped successfully!';
      } else {
        statusDiv.textContent = `Error: ${result.error}`;
      }
    } catch (error) {
      statusDiv.textContent = `Error: ${error.message}`;
    }
  });
  
  // Copy button click handler
  copyButton.addEventListener('click', () => {
    if (!scrapedContent) {
      statusDiv.textContent = 'No content scraped yet';
      return;
    }
    
    navigator.clipboard.writeText(scrapedContent)
      .then(() => {
        statusDiv.textContent = 'Content copied to clipboard';
      })
      .catch(error => {
        statusDiv.textContent = `Error copying to clipboard: ${error.message}`;
      });
  });
  
  // Download button click handler
  downloadButton.addEventListener('click', () => {
    if (!scrapedContent) {
      statusDiv.textContent = 'No content scraped yet';
      return;
    }
    
    // Get the current date and time for the filename
    const now = new Date();
    const timestamp = now.toISOString().replace(/[:.]/g, '-');
    
    // Create a download blob
    const blob = new Blob([scrapedContent], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    
    // Download the file
    chrome.downloads.download({
      url: url,
      filename: `content-scrape-${timestamp}.html`,
      saveAs: true
    });
    
    statusDiv.textContent = 'Download started';
  });
});

/**
 * content.js - Content script that runs on web pages
 */
// Listen for messages from the popup
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  if (request.action === 'scrapeContent') {
    try {
      // Find the element using the provided selector
      const elements = document.querySelectorAll(request.selector);
      
      if (elements.length === 0) {
        sendResponse({
          success: false,
          error: `No elements found with selector: ${request.selector}`
        });
        return true;
      }
      
      // Get the HTML content of the first matching element
      const content = elements[0].outerHTML;
      
      sendResponse({
        success: true,
        content: content
      });
    } catch (error) {
      sendResponse({
        success: false,
        error: error.message
      });
    }
    
    return true; // Keep the message channel open for async response
  }
});

/**
 * background.js - Background script for extension
 */
// Handle extension installation
chrome.runtime.onInstalled.addListener(() => {
  console.log('Content Scraper extension installed');
});

/**
 * How to use this extension:
 * 
 * 1. Create a new folder for your extension
 * 2. Create the files mentioned above with their respective content
 * 3. Create an "icons" folder and add icon files (16x16, 48x48, and 128x128 pixels)
 * 4. In Chrome, go to chrome://extensions/
 * 5. Enable "Developer mode" (toggle in the top-right corner)
 * 6. Click "Load unpacked" and select your extension folder
 * 7. The extension should now appear in your browser toolbar
 * 
 * Usage instructions:
 * - Click the extension icon to open the popup
 * - Enter a CSS selector for the content you want to scrape (or use a preset)
 * - Click "Scrape Content" to scrape the content from the active tab
 * - Click "Copy to Clipboard" to copy the scraped HTML
 * - Click "Download HTML" to download the scraped content as an HTML file
 */
 